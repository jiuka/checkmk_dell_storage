#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# checkmk_dell_storage - Checkmk extension for Dell Storage API
#
# Copyright (C) 2021  Marius Rieder <marius.rieder@scs.ch>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

from typing import Optional, Sequence
import re
import datetime
import logging
import requests
from textwrap import dedent
from functools import cached_property

from cmk.special_agents.utils.agent_common import (
    special_agent_main,
)
from cmk.special_agents.utils.argument_parsing import (
    Args,
    create_default_argument_parser,
)

import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

LOGGING = logging.getLogger('agent_dell_storage')


class DellStorageApi:
    HISTORICAL_FILTER = {
        'HistoricalFilter': {
            'UseCurrent': True,
            'MaxCountReturn': 1,
            'StartTime': (datetime.datetime.now() - datetime.timedelta(minutes=20)).isoformat(),
        }
    }

    def __init__(self, url, user, password, verify_cert):
        LOGGING.info('Initialize DellStorageApi Clinet')
        self._url = url
        self._verify_cert = verify_cert

        self._login(user, password)

    @cached_property
    def _connection(self):
        conn = requests.Session()
        conn.headers.update({
            'Content-Type': 'application/json; charset=utf-8',
            'Accept': 'application/json',
            'x-dell-api-version': '4.0',
        })
        return conn

    def _login(self, user: str, password: str) -> None:
        self._api = self._request('POST', '/ApiConnection/Login', auth=(user, password))
        LOGGING.info('Login to {provider} v{providerVersion}'.format(**self._api))

    def _request(self, methode, call, payload=None, **kwargs) -> requests.Response:
        url = self.url(call)
        LOGGING.debug('>> {methode} {url}'.format(methode=methode, url=url))
        resp = self._connection.request(methode, url, json=payload, verify=self._verify_cert, **kwargs)
        LOGGING.debug('<< {status} {reason}'.format(status=resp.status_code, reason=resp.reason))
        resp.raise_for_status()
        return resp.json()

    def url(self, call):
        return '%s%s' % (self._url, call if call[0] != '/' else call[1:])

    def storage_centers(self):
        storage_centers = self.get('/ApiConnection/ApiConnection/{instanceId}/StorageCenterList'.format(**self._api))
        return [self.StorageCenter(self, **sc) for sc in storage_centers]

    def get(self, call) -> requests.Response:
        return self._request('GET', call)

    def post(self, call, payload={}) -> requests.Response:
        return self._request('POST', call, payload=payload)

    class ApiObject(object):
        def __init__(self, api, **kwargs):
            self._api = api

            for key, vtype in self.__annotations__.items():
                self.__setattr__(key, vtype(kwargs.get(key, None)))

        def __get_item__(self, key):
            return self.__get_attr__(key)

        def __repr__(self):
            return f'<{self.__class__.__name__} {self.instanceName} {self.instanceId}>'

        def _get_association(self, name, url):
            if not hasattr(self, f'_{name}'):
                objects = self._api.get(url)
                setattr(self, f'_{name}', [self._instanciate(obj) for obj in objects])
            return getattr(self, f'_{name}')

        def _instanciate(self, obj):
            otype = obj['objectType']
            cls = getattr(DellStorageApi, otype, None)
            if cls:
                return cls(self._api, **obj)
            return obj

    class StorageCenter(ApiObject):
        instanceId: str
        instanceName: str
        status: str
        statusMessage: str
        modelSeries: str
        serviceTag: str
        serialNumber: str
        version: str
        chassisPresent: bool

        @cached_property
        def chassi(self):
            return self._instanciate(self._api.get(f'/StorageCenter/StorageCenter/{self.instanceId}/Chassis'))

        @cached_property
        def objectCount(self):
            return self._instanciate(self._api.get(f'/StorageCenter/StorageCenter/{self.instanceId}/ObjectCount'))

        def controllers(self):
            return self._get_association('controllers',
                                         f'/StorageCenter/StorageCenter/{self.instanceId}/ControllerList')

        def enclosures(self):
            return self._get_association('enclosures',
                                         f'/StorageCenter/StorageCenter/{self.instanceId}/EnclosureList')

        def volumes(self):
            return self._get_association('volumes',
                                         f'/StorageCenter/StorageCenter/{self.instanceId}/VolumeList')

        @property
        def numberOfControllers(self):
            return self.objectCount.numberOfControllers

        @property
        def numberOfDevicesInUse(self):
            return self.objectCount.numberOfDevicesInUse

        @property
        def numberOfDisks(self):
            return self.objectCount.numberOfDisks

        @property
        def numberOfLiveVolumes(self):
            return self.objectCount.numberOfLiveVolumes

        @property
        def numberOfReplays(self):
            return self.objectCount.numberOfReplays

        @property
        def numberOfReplications(self):
            return self.objectCount.numberOfReplications

        @property
        def numberOfServers(self):
            return self.objectCount.numberOfServers

        @property
        def numberOfVolumes(self):
            return self.objectCount.numberOfVolumes

    class ScChassis(ApiObject):
        instanceId: str
        instanceName: str

        @cached_property
        def enclosure(self):
            return self._instanciate(self._api.get(f'/StorageCenter/ScChassis/{self.instanceId}/Enclosure'))

        def fans(self):
            return self._get_association('fans',
                                         f'/StorageCenter/ScChassis/{self.instanceId}/FanSensorList')

        def powersupplies(self):
            return self._get_association('powersupplies',
                                         f'/StorageCenter/ScChassis/{self.instanceId}/PowerSupplyList')

        def temperatures(self):
            return self._get_association('temperatures',
                                         f'/StorageCenter/ScChassis/{self.instanceId}/TemperatureSensorList')

    class ScObjectCount(ApiObject):
        numberOfControllers: int
        numberOfDevicesInUse: int
        numberOfDisks: int
        numberOfLiveVolumes: int
        numberOfReplays: int
        numberOfReplications: int
        numberOfServers: int
        numberOfVolumes: int

    class ScController(ApiObject):
        instanceId: str
        instanceName: str
        lastBootTime: str
        leader: bool
        model: str
        status: str
        statusMessage: str
        version: str
        serviceTag: str
        expressServiceCode: str
        hardwareSerialNumber: str

        def ports(self):
            return self._get_association('ports',
                                         f'/StorageCenter/ScController/{self.instanceId}/PhysicalControllerPortList')

        def fans(self):
            return self._get_association('fans',
                                         f'/StorageCenter/ScController/{self.instanceId}/FanSensorList')

        def powersupplies(self):
            return self._get_association('powersupplies',
                                         f'/StorageCenter/ScController/{self.instanceId}/PowerSupplyList')

        def temperatures(self):
            return self._get_association('temperatures',
                                         f'/StorageCenter/ScController/{self.instanceId}/TemperatureSensorList')

    class ScControllerPort(ApiObject):
        instanceId: str
        instanceName: str
        status: str
        statusMessage: str
        cabled: bool
        transportType: str
        wwn: str

        @property
        def readIops(self):
            return self.iousage['readIops']

        @property
        def readBps(self):
            return self.iousage['readKbPerSecond'] * 1024

        @property
        def readLatency(self):
            return self.iousage['readLatency'] / 1000000.0

        @property
        def writeIops(self):
            return self.iousage['writeIops']

        @property
        def writeBps(self):
            return self.iousage['writeKbPerSecond'] * 1024

        @property
        def writeLatency(self):
            return self.iousage['readLatency'] / 1000000.0

        @property
        def iousage(self):
            if not hasattr(self, '_iousage'):

                self._iousage = self._api.post(f'/StorageCenter/ScControllerPort/{self.instanceId}/GetHistoricalIoUsage',
                                               payload=DellStorageApi.HISTORICAL_FILTER)[0]
            return self._iousage

    class ScControllerFanSensor(ApiObject):
        instanceId: str
        instanceName: str
        status: str
        statusMessage: str
        location: str
        currentRpm: int
        lowerCriticalThreshold: str
        lowerWarningThreshold: str
        lowerNormalThreshold: str
        upperNormalThreshold: str
        upperWarningThreshold: str
        upperCriticalThreshold: str

    class ScControllerPowerSupply(ApiObject):
        instanceId: str
        instanceName: str
        status: str
        statusMessage: str
        location: str

    class ScControllerTemperatureSensor(ApiObject):
        instanceId: str
        instanceName: str
        status: str
        statusMessage: str
        location: str
        currentTemperature: str
        lowerCriticalThreshold: str
        lowerWarningThreshold: str
        lowerNormalThreshold: str
        upperNormalThreshold: str
        upperWarningThreshold: str
        upperCriticalThreshold: str

        @property
        def temperature(self):
            return self.currentTemperature.split('°')[0]

        @property
        def lowerCrit(self):
            return self.lowerCriticalThreshold.split('°')[0]

        @property
        def lowerWarn(self):
            return self.lowerWarningThreshold.split('°')[0]

        @property
        def lowerNorm(self):
            return self.lowerNormalThreshold.split('°')[0]

        @property
        def upperNorm(self):
            return self.upperNormalThreshold.split('°')[0]

        @property
        def upperWarn(self):
            return self.upperWarningThreshold.split('°')[0]

        @property
        def upperCrit(self):
            return self.upperCriticalThreshold.split('°')[0]

    class ScEnclosure(ApiObject):
        instanceId: str
        instanceName: str
        status: str
        statusMessage: str
        model: str
        revision: str
        type: str
        enclosureCapacity: str
        serviceTag: str
        expressServiceCode: str

        def fans(self):
            return self._get_association('fans',
                                         f'/StorageCenter/ScEnclosure/{self.instanceId}/CoolingFanSensorList')

        def disks(self):
            return self._get_association('disks',
                                         f'/StorageCenter/ScEnclosure/{self.instanceId}/DiskList')

        def powersupplies(self):
            return self._get_association('powersupplies',
                                         f'/StorageCenter/ScEnclosure/{self.instanceId}/PowerSupplyList')

        def temperatures(self):
            return self._get_association('temperatures',
                                         f'/StorageCenter/ScEnclosure/{self.instanceId}/TemperatureSensorList')

    class ScEnclosureCoolingFanSensor(ApiObject):
        instanceId: str
        instanceName: str
        status: str
        statusMessage: str
        location: str

    class ScDisk(ApiObject):
        instanceId: str
        instanceName: str
        status: str
        statusMessage: str

        @property
        def allocatedSpace(self):
            return self.usage['allocatedSpace'].split(' ')[0]

        @property
        def totalSpace(self):
            return self.usage['totalSpace'].split(' ')[0]

        @property
        def usage(self):
            if not hasattr(self, '_usage'):
                self._usage = self._api.get(f'/StorageCenter/ScDisk/{self.instanceId}/StorageUsage')
            return self._usage

        @property
        def readIops(self):
            return self.iousage['readIops']

        @property
        def readBps(self):
            return self.iousage['readKbPerSecond'] * 1024

        @property
        def readLatency(self):
            return self.iousage['readLatency'] / 1000000.0

        @property
        def writeIops(self):
            return self.iousage['writeIops']

        @property
        def writeBps(self):
            return self.iousage['writeKbPerSecond'] * 1024

        @property
        def writeLatency(self):
            return self.iousage['readLatency'] / 1000000.0

        @property
        def iousage(self):
            if not hasattr(self, '_iousage'):
                self._iousage = self._api.post(f'/StorageCenter/ScDisk/{self.instanceId}/GetHistoricalIoUsage',
                                               payload=DellStorageApi.HISTORICAL_FILTER)[0]
            return self._iousage

    class ScEnclosureTemperatureSensor(ScControllerTemperatureSensor):
        pass

    class ScEnclosurePowerSupply(ScControllerPowerSupply):
        pass

    class ScVolume(ApiObject):
        instanceId: str
        instanceName: str
        status: str
        statusMessage: str
        active: bool

        @property
        def activeSpace(self):
            return self.usage['activeSpace'].split(' ')[0]

        @property
        def configuredSpace(self):
            return self.usage['configuredSpace'].split(' ')[0]

        @property
        def usage(self):
            if not hasattr(self, '_usage'):
                self._usage = self._api.get(f'/StorageCenter/ScVolume/{self.instanceId}/StorageUsage')
            return self._usage

        @property
        def readIops(self):
            return self.iousage['readIops']

        @property
        def readBps(self):
            return self.iousage['readKbPerSecond'] * 1024

        @property
        def readLatency(self):
            return self.iousage['readLatency'] / 1000000.0

        @property
        def writeIops(self):
            return self.iousage['writeIops']

        @property
        def writeBps(self):
            return self.iousage['writeKbPerSecond'] * 1024

        @property
        def writeLatency(self):
            return self.iousage['readLatency'] / 1000000.0

        @property
        def iousage(self):
            if not hasattr(self, '_iousage'):
                self._iousage = self._api.post(f'/StorageCenter/ScVolume/{self.instanceId}/GetHistoricalIoUsage',
                                               payload=DellStorageApi.HISTORICAL_FILTER)[0]
            return self._iousage


class AgentDellStorage:
    def run(self):
        special_agent_main(self.parse_arguments, self.main)

    def parse_arguments(self, argv: Optional[Sequence[str]]) -> Args:
        parser = create_default_argument_parser(description=__doc__)

        parser.add_argument('-u', '--user', dest='user', required=True,
                            help='User to access the DSM.')
        parser.add_argument('-p', '--password', dest='password', required=True,
                            help='Password to access the DSM.')
        parser.add_argument('-U', '--url', dest='url', required=True,
                            help='URL of the DSM RESt API. (Example https://host:3033/api/rest/)')
        parser.add_argument('--ignore-cert', dest='verify_cert', action='store_false',
                            help='Do not verify the SSL cert from the REST andpoint.')

        return parser.parse_args(argv)

    def main(self, args: Args):
        self.args = args

        self._api = DellStorageApi(args.url, args.user, args.password, args.verify_cert)

        print(dedent('''\
                <<<check_mk>>>
                Version: {providerVersion}
                AgentOS: {provider}
                '''.format(**self._api._api)))

        for storageCenter in self._api.storage_centers():
            self.piggyback(storageCenter.instanceName)
            self.section('center', [storageCenter], [
                'instanceName', 'status', 'statusMessage',
                'modelSeries', 'version',
                'serviceTag', 'serialNumber',
                'numberOfDevicesInUse', 'numberOfControllers', 'numberOfDisks', 'numberOfLiveVolumes',
                'numberOfReplays', 'numberOfReplications', 'numberOfServers', 'numberOfVolumes',
            ])

            self.section('controller', storageCenter.controllers(), [
                'instanceName', 'status', 'statusMessage',
                'lastBootTime', 'leader',
                'model', 'version',
                'serviceTag', 'expressServiceCode', 'hardwareSerialNumber',
            ])

            self.section('enclosure', storageCenter.enclosures(), [
                'instanceName', 'status', 'statusMessage',
                'model', 'revision', 'type', 'enclosureCapacity',
                'serviceTag', 'expressServiceCode'
            ])

            self.section('volume', storageCenter.volumes(), [
                'instanceName', 'status', 'statusMessage',
                'activeSpace', 'configuredSpace',
                'readIops', 'readBps', 'readLatency',
                'writeIops', 'writeBps', 'writeLatency',
            ])

            print('<<<<>>>>')

            if storageCenter.chassisPresent:
                self.piggyback(f'{storageCenter.instanceName}-{storageCenter.chassi.enclosure.instanceName}')
                self.section('fan', storageCenter.chassi.fans(), [
                    'instanceName', 'status', 'statusMessage',
                    'location',
                    'currentRpm',
                    'lowerCriticalThreshold', 'lowerWarningThreshold', 'lowerNormalThreshold',
                    'upperNormalThreshold', 'upperWarningThreshold', 'upperCriticalThreshold',
                ])

                self.section('psu', storageCenter.chassi.powersupplies(), [
                    'instanceName', 'status', 'statusMessage',
                    'location',
                ])

                self.section('temp', storageCenter.chassi.temperatures(), [
                    'instanceName', 'status', 'statusMessage',
                    'location',
                    'temperature',
                    'lowerCrit', 'lowerWarn', 'lowerNorm',
                    'upperNorm', 'upperWarn', 'upperCrit',
                ])
                print('<<<<>>>>')

            for controller in storageCenter.controllers():
                self.piggyback(f'{storageCenter.instanceName}-{controller.instanceName}')
                self.section('controller', [controller], [
                    'instanceName', 'status', 'statusMessage',
                    'lastBootTime', 'leader',
                    'model', 'version',
                    'serviceTag', 'expressServiceCode', 'hardwareSerialNumber',
                ])

                self.section('port', controller.ports(), [
                    'instanceName', 'status', 'statusMessage',
                    'cabled', 'transportType', 'wwn',
                    'readIops', 'readBps', 'readLatency',
                    'writeIops', 'writeBps', 'writeLatency',
                ])

                self.section('fan', controller.fans(), [
                    'instanceName', 'status', 'statusMessage',
                    'location',
                    'currentRpm',
                    'lowerCriticalThreshold', 'lowerWarningThreshold', 'lowerNormalThreshold',
                    'upperNormalThreshold', 'upperWarningThreshold', 'upperCriticalThreshold',
                ])

                self.section('psu', controller.powersupplies(), [
                    'instanceName', 'status', 'statusMessage',
                    'location',
                ])

                self.section('temp', controller.temperatures(), [
                    'instanceName', 'status', 'statusMessage',
                    'location',
                    'temperature',
                    'lowerCrit', 'lowerWarn', 'lowerNorm',
                    'upperNorm', 'upperWarn', 'upperCrit',
                ])
            else:
                print('<<<<>>>>')

            for enclosure in storageCenter.enclosures():
                self.piggyback(f'{storageCenter.instanceName}-{enclosure.instanceName}')
                self.section('enclosure', [enclosure], [
                    'instanceName', 'status', 'statusMessage',
                    'model', 'revision', 'type', 'enclosureCapacity',
                    'serviceTag', 'expressServiceCode'
                ])

                self.section('fan', enclosure.fans(), [
                    'instanceName', 'status', 'statusMessage',
                    'location',
                ])

                self.section('disk', enclosure.disks(), [
                    'instanceName', 'status', 'statusMessage',
                    'allocatedSpace', 'totalSpace',
                    'readIops', 'readBps', 'readLatency',
                    'writeIops', 'writeBps', 'writeLatency',
                ])

                self.section('psu', enclosure.powersupplies(), [
                    'instanceName', 'status', 'statusMessage',
                    'location',
                ])

                self.section('temp', enclosure.temperatures(), [
                    'instanceName', 'status', 'statusMessage',
                    'location',
                    'temperature',
                    'None', 'lowerCrit', 'lowerWarn',
                    'upperWarn', 'upperCrit', 'None',
                ])
            else:
                print('<<<<>>>>')

    def piggyback(self, name=None):
        print(f'<<<<{re.sub(r"[^a-zA-Z0-9-_]", "", name)}>>>>')

    def section(self, name, instances=[], properties=[], separator=';'):
        if not instances:
            return
        print('<<<dell_storage_{name}:sep({sep})>>>'.format(name=name, sep=ord(separator)))
        for instance in instances:
            print(separator.join(map(lambda prop: str(getattr(instance, prop, None)), properties)))


if __name__ == '__main__':
    AgentDellStorage().run()
